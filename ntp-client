#!/usr/bin/perl

# This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

use strict;
use FindBin;
use lib "$FindBin::Bin";
use NTP::Client;
use Time::HiRes qw(gettimeofday);
use Getopt::Long;
use NTP::ntpd;
use NTP::ntpd::64;

my(%config) = (
  hostname => undef,
  ntp_shmid => undef,
  dns_lookup_interval => 60, # in minutes
  max_rtt => 0.037, # in seconds, recomendation: 2x min rtt
  static_offset => 0, # in microseconds
  help => undef, # show help
  skip_ntpd => undef, # don't send the data to ntpd
  expected_stratum => 1, # the clock stratum to expect
  response => undef, # which direction is the cable modem downstream?
  force_proto => 0, # which protocol to force: IPv4, IPv6, or auto
  bits => 32, # 32 or 64 bits TODO: autodetect
  );

sub usage {
  print <<OPTIONS
$0: measure ntp offsets, filter them, and submit them to ntpd via the shared memory interface

WARNING: do not run this against any NTP server you do not personally run.  It
sends one packet per second, which will annoy any public NTP server operator,
and likely get your client banned.

Options:
 --hostname=x............................ the hostname of the ntp server to poll (required)
 --ntp_shmid=x...(defaults to 0x4e545030) the ID of the shared memory from ntpd (see ipcs -m)
 --dns_lookup_interval=x (defaults to 60) the number of minutes between dns lookups
 --max_rtt=x..........(defaults to 0.037) the maximum number of seconds to wait for a response.
                                          recommended: 2* minimum_round_trip_time
 --static_offset=x........(defaults to 0) the number of microseconds it takes the request to reach
                                          the server.  You'll have to measure this independently. 
					  A rough estimate would be rtt/2 - 4ms
 --skip-ntpd............................. Don't send the data to ntpd (for debugging)
 --help.................................. This help screen
 --expected-stratum=x.....(defaults to 1) The expected stratum of the remote clock. Answers not 
                                          matching this will be ignored
 --response.............................. Use the NTP response time difference. Use this when the
                                          NTP client is downstream of the cable modem
 --ipv6.................................. Force IPv6 (default: auto)
 --ipv4.................................. Force IPv4 (default: auto)
 --bits=x................(defaults to 32) Which platform ntpd is running under: 32bit or 64bit
OPTIONS
}

my $result = GetOptions (
    "hostname=s" => \$config{hostname},
    "ntp_shmid=s" => \$config{ntp_shmid},
    "dns_lookup_interval=i" => \$config{dns_lookup_interval},
    "max_rtt=f" => \$config{max_rtt},
    "static_offset=i" => \$config{static_offset},
    "help"  => \$config{help},
    "skip-ntpd" => \$config{skip_ntpd},
    "expected-stratum=i" => \$config{expected_stratum},
    "response" => \$config{response},
    "ipv6" => sub { $config{force_proto} = "inet6"; },
    "ipv4" => sub { $config{force_proto} = "inet"; },
    "bits=i" => \$config{bits},
    );  # flag

$config{dns_lookup_interval} = $config{dns_lookup_interval} * 60;
$config{static_offset} = $config{static_offset} / 1000000;
if(not defined $config{ntp_shmid}) {
  $config{ntp_shmid} = 0x4e545030;
} else {
  $config{ntp_shmid} = hex($config{ntp_shmid});
}

if(not defined $config{hostname} or $config{help} or not $result) {
  usage();
  exit(1);
}

our(%stats, @all_response, @all_rtt);

sub percentile {
  my($array,$pct) = @_;

  my @temp = sort { $a <=> $b } @$array;
  my $items = int(@temp * $pct) - 1;
  if($items > @temp) {
    $items = @temp;
  } elsif($items < 0) {
    $items = 0;
  }
  return $temp[$items];
}

sub filtered_percentile {
  my($array,$max,$min,$pct) = @_;

  my(@items);
  foreach my $item (@$array) {
    if($item >= $min and $item <= $max) {
      push(@items, $item);
    }
  }

  return(percentile(\@items, $pct), scalar(@items));
}

sub send_offset {
  my($ntpd,$offset) = @_;

  my $local = [gettimeofday];

  my $remote_s = $local->[0] + $local->[1]/1000000 + $offset;
  my $remote_us = ($remote_s - int($remote_s)) * 1000000;
  $remote_us = int($remote_us);
  $remote_s = int($remote_s);

  $ntpd->send_time($local, [$remote_s,$remote_us]);
}

sub process_responses {
  my($responses,$ntpd) = @_;

  if(@$responses == 19) {
    my(@times);
    foreach my $response (@$responses) {
      if($config{response}) {
        push(@times, -1 * $response->response());
      } else {
        push(@times, $response->request());
      }
      push(@all_rtt, $response->rtt());
    }
    push(@all_response, @times);
    if(@all_response > 200) {
      splice(@all_response, -1, 200);
      splice(@all_rtt, -1, 200);
    }
    my $pct_90 = percentile(\@all_response, 0.90);
    my $pct_03 = percentile(\@all_response, 0.03);
    my($filtered_mode,$item_count) = filtered_percentile(\@times, $pct_90, $pct_03, 0.5);
    if($item_count < 10) { # start over if we're using less than 1/2 of the samples
      @all_response = @times;
      $pct_90 = percentile(\@all_response, 0.90);
      $pct_03 = percentile(\@all_response, 0.03);
      ($filtered_mode,$item_count) = filtered_percentile(\@times, $pct_90, $pct_03, 0.5);
      $stats{"reset"}++;
    }
    my $rtt_90 = percentile(\@all_rtt, 0.90);
    my $rtt_10 = percentile(\@all_rtt, 0.10);
    my $offset = $filtered_mode;
    if($config{response}) {
      $offset += $config{static_offset};
    } else {
      $offset -= $config{static_offset};
    }
    printf("%d %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %d S %d %d %d %d %d %d\n", time(), $pct_90, $pct_03, ($pct_90-$pct_03), $offset, $rtt_90, $rtt_10, $item_count, $stats{lookups}, $stats{requests}, $stats{responses}, $stats{over_rtt}, $stats{"reset"}, $stats{error});
    if(not $config{skip_ntpd}) {
      send_offset($ntpd,$offset);
    }
    @$responses = ();
  }
}

my $ntpd;
if(not $config{skip_ntpd}) {
  if($config{bits} == 64) {
    $ntpd = NTP::ntpd::64->new(shmkey => $config{ntp_shmid});
  } else {
    $ntpd = NTP::ntpd->new(shmkey => $config{ntp_shmid});
  }
}

my $client = NTP::Client->new();

open(LOG,">>ntp-client.log");

$| = 1;

my(@responses);
my $last_lookup = 0;
while(1) {
  if($last_lookup < time() - $config{dns_lookup_interval}) {
    $client->lookup($config{hostname},$config{force_proto});
    $stats{lookups}++;
    $last_lookup = time();
  }
  eval {
    $stats{requests}++;
    my $response = $client->get_ntp_response();
    if($response->stratum() != $config{expected_stratum}) {
      die("stratum ".$response->stratum()." != ".$config{expected_stratum});
    }
    my $one_way_difference;
    if($config{response}) {
      $one_way_difference = $response->response();
    } else {
      $one_way_difference = $response->request();
    }
    if(abs($one_way_difference) > 0.2) { # log all time differences over 200ms
      printf LOG ("%d %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f\n", time(), $response->rtt(), 
          $response->local_transmit_time(), $response->remote_recv_time(), 
          $response->remote_transmit_time(), $response->local_recv_time(),
          $response->local_transmit_time_after_processing());
    }
    $stats{responses}++;
    if($response->rtt() < $config{max_rtt}) {
      push(@responses, $response);
      process_responses(\@responses,$ntpd);
    } else {
      $stats{over_rtt}++;
    }
  };
  if($@) {
    print "ERROR: ",$@;
    $stats{error}++;
    sleep(10);
  }
  sleep(1);
}
